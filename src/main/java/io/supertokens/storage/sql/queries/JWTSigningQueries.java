/*
 *    Copyright (c) 2021, VRAI Labs and/or its affiliates. All rights reserved.
 *
 *    This software is licensed under the Apache License, Version 2.0 (the
 *    "License") as published by the Apache Software Foundation.
 *
 *    You may not use this file except in compliance with the License. You may
 *    obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 *    License for the specific language governing permissions and limitations
 *    under the License.
 */

package io.supertokens.storage.sql.queries;

import io.supertokens.pluginInterface.RowMapper;
import io.supertokens.pluginInterface.exceptions.StorageQueryException;
import io.supertokens.pluginInterface.jwt.JWTAsymmetricSigningKeyInfo;
import io.supertokens.pluginInterface.jwt.JWTSigningKeyInfo;
import io.supertokens.pluginInterface.jwt.JWTSymmetricSigningKeyInfo;
import io.supertokens.storage.sql.Start;
import io.supertokens.storage.sql.config.Config;
import io.supertokens.storage.sql.dataaccessobjects.jwt.impl.JwtSigningDAO;
import io.supertokens.storage.sql.domainobjects.jwtsigning.JWTSigningKeysDO;
import org.hibernate.Session;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class JWTSigningQueries {
    static String getQueryToCreateJWTSigningTable(Start start) {
        /*
         * created_at should only be used to determine the key that was added to the database last, it should not be
         * used to determine the validity or lifetime of a key. While the assumption that created_at refers to the time
         * the key was generated holds true for keys generated by the core, it is not guaranteed when we allow user
         * defined
         * keys in the future.
         */
        return "CREATE TABLE IF NOT EXISTS " + Config.getConfig(start).getJWTSigningKeysTable() + " ("
                + "key_id VARCHAR(255) NOT NULL," + "key_string TEXT NOT NULL," + "algorithm VARCHAR(10) NOT NULL,"
                + "created_at BIGINT ," + "PRIMARY KEY(key_id));";
    }

    public static List<JWTSigningKeyInfo> getJWTSigningKeys_Transaction(Start start, Session sessionInstance)
            throws SQLException, StorageQueryException {

        JwtSigningDAO jwtSigningDAO = new JwtSigningDAO(sessionInstance);

        List<JWTSigningKeysDO> results = jwtSigningDAO.getAllOrderByCreatedAtDesc_locked();
        List<JWTSigningKeyInfo> finalResults = new ArrayList<>();

        for (int i = 0; i < results.size(); i++) {
            JWTSigningKeysDO keysDO = results.get(i);
            if (keysDO.getKey_string().contains("|")) {
                finalResults.add(new JWTAsymmetricSigningKeyInfo(keysDO.getKey_id(), keysDO.getCreated_at(),
                        keysDO.getAlgorithm(), keysDO.getKey_string()));
            } else {
                finalResults.add(new JWTSymmetricSigningKeyInfo(keysDO.getKey_id(), keysDO.getCreated_at(),
                        keysDO.getAlgorithm(), keysDO.getKey_string()));
            }
        }
        return finalResults;

    }

    private static class JWTSigningKeyInfoRowMapper implements RowMapper<JWTSigningKeyInfo, ResultSet> {
        private static final JWTSigningKeyInfoRowMapper INSTANCE = new JWTSigningKeyInfoRowMapper();

        private JWTSigningKeyInfoRowMapper() {
        }

        private static JWTSigningKeyInfoRowMapper getInstance() {
            return INSTANCE;
        }

        @Override
        public JWTSigningKeyInfo map(ResultSet result) throws Exception {
            String keyId = result.getString("key_id");
            String keyString = result.getString("key_string");
            long createdAt = result.getLong("created_at");
            String algorithm = result.getString("algorithm");

            if (keyString.contains("|")) {
                return new JWTAsymmetricSigningKeyInfo(keyId, createdAt, algorithm, keyString);
            } else {
                return new JWTSymmetricSigningKeyInfo(keyId, createdAt, algorithm, keyString);
            }
        }
    }

    public static void setJWTSigningKeyInfo_Transaction(Start start, Session sessionInstance, JWTSigningKeyInfo info)
            throws SQLException {

        JwtSigningDAO jwtSigningDAO = new JwtSigningDAO(sessionInstance);
        jwtSigningDAO.insert(info.keyId, info.keyString, info.algorithm, info.createdAtTime);
    }
}
